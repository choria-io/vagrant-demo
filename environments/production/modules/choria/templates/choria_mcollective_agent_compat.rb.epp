#!<%= $choria::rubypath %>

require "mcollective"

@options = {}

OptionParser.new do |opts|
  opts.on("--config FILE", "Configuration to use for the MCollective subsystem") do |v|
    @options["config"] = v
  end

  opts.on("--parse-compound", "Parse a compound filter") do
    @options["parse_compound"] = true
  end

  opts.on("--validate-compound", "Parse a compound filter") do
    @options["validate_compound"] = true
  end
end.parse!

abort("Please specify a config file using --config") unless @options["config"]

module MCollective
  class AgentShim
    def initialize(config, msg)
      @config = config
      @msg = msg
      @configured = false
    end

    def loadconfig
      return if @configured

      config = Config.instance
      config.loadconfig(@config)
      @configured = true
    end

    # Parses a compound filter and return the callstack match_compound_filter needs
    #
    # This is intended to be run on the client to parse a human typed string into the
    # call stack that traverse the network.
    #
    # On failure a hash with `statuscode` and `statusmsg` is returned
    def parse_compound
      loadconfig

      Matcher.create_compound_callstack(@msg)
    rescue Exception # rubocop:disable Lint/RescueException
      Log.error("Parsing compound filter failed: %s" % $!.message)
      Log.error($!.backtrace.join("\n\t\t"))
      {"statuscode" => 1, "statusmsg" => "Choria MCollective Compatability Layer failed to parse the compound filter: %s" % $!.message}
    end

    #Â Matches a compound filter on the current host
    #
    # The format of the filter should be that which parse_compound returns and what the
    # ruby client traditionally have put on the wire
    #
    # Returns a hash with `matched`
    def match_compound_filter
      loadconfig

      security = Security::Base.new

      compound = JSON.parse(@msg)
      compound = [compound] if compound.first.is_a?(Hash)
      filter = {"compound" => compound}

      Data.load_data_sources
      load_agents

      matched = security.validate_filter?(filter)

      {"matched" => matched}
    rescue Exception # rubocop:disable Lint/RescueException
      Log.error("Matching compound filter failed: %s" % $!.message)
      Log.error($!.backtrace.join("\n\t\t"))
      {"matched" => false}
    end

    def request
      @request ||= begin
                     request = JSON.parse(@msg)
                     symbolized_request = {}

                     request.each do |k, v|
                       symbolized_request[k.intern] = v
                     end

                     symbolized_request
                   end
    end

    def load_agents
       PluginManager.find(:agent).each do |agent|
         classname = "MCollective::Agent::%s" % agent.capitalize

         PluginManager.loadclass(classname)

         if activate_agent?(agent)
           PluginManager << {:type => "#{agent}_agent", :class => classname, :single_instance => true}
         end
       end
    end

    def activate_agent?(agent)
      klass = Kernel.const_get("MCollective").const_get("Agent").const_get(agent.capitalize)

      if klass.respond_to?("activate?")
        klass.activate?
      else
        true
      end
    rescue Exception => e
      false
    end

    def agent
      @agent ||= begin
                   agent = PluginManager.find_and_load(:agent) do |plugin|
                     plugin == request[:agent]
                   end.first

                   if agent
                     klass = Kernel.const_get(agent)
                     if klass.ancestors.include?(RPC::Agent) && klass.activate?
                       klass.new
                     end
                   end
                 end
    end

    # Calls an action within an agent
    #
    # The input has to be a request exactly as the mcollective security system would have produced it
    # output is a standard RPC reply
    def dispatch
      loadconfig

      abort("Unknown agent %s" % request[:agent]) unless agent

      Log.debug("Dispatching request %s from %s@%s to %s#%s" % [request[:requestid], request[:callerid], request[:senderid], request[:body]["agent"], request[:body]["action"]])

      reply = Timeout.timeout(agent.timeout) do
        # technically the nil here should be a connector, no agent should be fiddling with that
        # stuff really its ancient legacy for non RPC agents. RPC agents cannot access the connector
        # some audit plugins might and so would agent hooks - this is all insane and stuff I just
        # do not want to support, happy for them to fail
        agent.handlemsg(request, nil)
      end

      reply

    rescue Timeout::Error
      Log.warn("Timeout while handling message %s from %s for agent %s" % [request[:requestid], request[:callerid], request[:agent]])
      {"statuscode" => 1, "statusmsg" => "Choria MCollective Compatibility Layer failed to invoke the action: %s" % $!.message, "data" => {}}

    rescue Exception # rubocop:disable Lint/RescueException
      Log.error("Execution of %s failed: %s" % [request[:agent], $!.message])
      Log.error($!.backtrace.join("\n\t\t"))
      {"statuscode" => 1, "statusmsg" => "Choria MCollective Compatibility Layer failed to invoke the action: %s" % $!.message, "data" => {}}
    end
  end
end

shim = MCollective::AgentShim.new(@options["config"], STDIN.read.chomp)

if @options["parse_compound"]
  puts shim.parse_compound.to_json
elsif @options["validate_compound"]
  puts shim.match_compound_filter.to_json
else
  puts shim.dispatch.to_json
end
